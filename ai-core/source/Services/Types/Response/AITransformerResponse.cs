using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using AICore.Services.Types.Data;
using Newtonsoft.Json;

namespace AICore.Services.Types.Response
{
    /// <summary>
    /// Represents the response from generative pre-trained transformers models.
    /// It includes information on usage and generated data.
    /// </summary>
    [Serializable]
    public class AITransformerResponse
    {
        /// <summary>
        /// Information about the number of tokens generated for this request.
        /// This includes total number of tokens, prompt tokens, and completion tokens.
        /// </summary>
        public UsageData usage;

        /// <summary>
        /// List of data that holds the messages produced by the AI model.
        /// Each message may include role, content, and function calls.
        /// </summary>
        public List<GeneratedData> generated;
        
        /// <summary>
        /// The result data of the request.
        /// </summary>
        public object data;
        
        /// <summary>
        /// The unique identifier of the request instance that processed this request.
        /// </summary>
        public int instanceId;

        /// <summary>
        /// Transforms the result data into a specific type by deserializing the generated content.
        /// </summary>
        /// <returns>The deserialized data in the specified type.</returns>
        public T TransformData<T>()
        {
            var content = generated.Last().message.content;
            var match = new Regex(@"\{[\s\S]*?\}").Match(content);
            return JsonConvert.DeserializeObject<T>(match.Value);
        }

        /// <summary>
        /// Retrieves the function call data of the last generated content.
        /// </summary>
        /// <returns>The function call data as an object of the specified type.</returns>
        public T GetFunctionCall<T>() where T : class
        {
            var content = generated.Last().message.toolCalls.First().function.arguments;
            return JsonConvert.DeserializeObject<T>(content);
        }
        
        /// <summary>
        /// Retrieves the last generated content.
        /// </summary>
        /// <returns>The raw content as a string.</returns>
        public string GetRawData()
        {
            return generated.Last().message.content;
        }
        
        /// <summary>
        /// Retrieves the result data of the request.
        /// </summary>
        /// <returns>The data as an object of the specified type.</returns>
        public T GetData<T>()
        {
            return (T)data;
        }
    }

    /// <summary>
    /// Represents a single generated message by the AI model's response.
    /// The message includes the role of the conversation participant, the content, and function call data (if a function was called).
    /// </summary>
    [Serializable]
    public class GeneratedData
    {
        /// <summary>
        /// The message generated by the AI model, which can include a role, content, and function call information.
        /// </summary>
        public DataContent message;

        /// <summary>
        /// The reason the AI model finished generating the response. Can be "stop", "length", "function_call", "content_filter" or "null".
        /// </summary>
        public string finishReason;
    }

    /// <summary>
    /// Detailed information about the usage of tokens in the AI model's response.
    /// </summary>
    [Serializable]
    public class UsageData
    {
        /// <summary>
        /// Number of tokens used in the user's input.
        /// </summary>
        public int promptTokens;

        /// <summary>
        /// Number of tokens used in the AI model's response.
        /// </summary>
        public int completionTokens;

        /// <summary>
        /// Total number of tokens used during the request and response, including both the user's input and AI model's output.
        /// </summary>
        public int totalTokens;
    }

    /// <summary>
    /// Represents a single message of the conversation generated by the AI model.
    /// The message can include a role (either "system", "user", or "assistant"), content, and possible function calls.
    /// </summary>
    [Serializable]
    public class DataContent
    {
        /// <summary>
        /// The role of the entity sending the message - can be "system", "user", "function", or "assistant".
        /// </summary>
        public AIRole role;

        /// <summary>
        /// The content of the message.
        /// </summary>
        public string content;

        /// <summary>
        /// Details of a function call including its name and arguments.
        /// </summary>
        public List<ToolContent> toolCalls;
    }

    public class ToolContent
    {
        public string id;
        public string type;
        public FuntionToolContent function;
    }
    
    [Serializable]
    public class FuntionToolContent
    {
        /// <summary>
        /// The name of the called function.
        /// </summary>
        public string name;

        /// <summary>
        /// The arguments for the called function.
        /// </summary>
        public string arguments;
    }
}